{
    "function_name": "for",
    "original_function": "\n\n\tfor (i = 0; i < adev->num_ip_blocks; i++) {\n\t\tif (!(adev->ip_blocks[i].version->type ==\n\t\t\t      AMD_IP_BLOCK_TYPE_GFX ||\n\t\t      adev->ip_blocks[i].version->type ==\n\t\t\t      AMD_IP_BLOCK_TYPE_SDMA ||\n\t\t      adev->ip_blocks[i].version->type ==\n\t\t\t      AMD_IP_BLOCK_TYPE_COMMON))\n\t\t\tcontinue;\n\n\t\tif (adev->ip_blocks[i].version->funcs->late_init) {\n\t\t\tr = adev->ip_blocks[i].version->funcs->late_init(\n\t\t\t\t(void *)adev);\n\t\t\tif (r) {\n\t\t\t\tdev_err(adev->dev,\n\t\t\t\t\t\"late_init of IP block <%s> failed %d after reset\\n\",\n\t\t\t\t\tadev->ip_blocks[i].version->funcs->name,\n\t\t\t\t\tr);\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t\tadev->ip_blocks[i].status.late_initialized = true;\n\t}",
    "fixed_function": "for (i = 0; i < adev->num_ip_blocks; i++) {\n\tif (!(adev->ip_blocks[i].version && adev->ip_blocks[i].version->type ==\n\t\t\t      AMD_IP_BLOCK_TYPE_GFX ||\n\t\t      adev->ip_blocks[i].version && adev->ip_blocks[i].version->type ==\n\t\t\t      AMD_IP_BLOCK_TYPE_SDMA ||\n\t\t      adev->ip_blocks[i].version && adev->ip_blocks[i].version->type ==\n\t\t\t      AMD_IP_BLOCK_TYPE_COMMON))\n\t\tcontinue;\n\n\tif (adev->ip_blocks[i].version && adev->ip_blocks[i].version->funcs &&\n\t    adev->ip_blocks[i].version->funcs->late_init) {\n\t\tr = adev->ip_blocks[i].version->funcs->late_init(\n\t\t\t(void *)adev);\n\t\tif (r) {\n\t\t\tdev_err(adev->dev,\n\t\t\t\t\"late_init of IP block <%s> failed %d after reset\\n\",\n\t\t\t\tadev->ip_blocks[i].version->funcs->name,\n\t\t\t\tr);\n\t\t\treturn r;\n\t\t}\n\t}\n\tadev->ip_blocks[i].status.late_initialized = true;\n}"
}