{
    "function_name": "aldebaran_reset_init",
    "original_function": "\n\nint aldebaran_reset_init(struct amdgpu_device *adev)\n{\n\tstruct amdgpu_reset_control *reset_ctl;\n\n\treset_ctl = kzalloc(sizeof(*reset_ctl), GFP_KERNEL);\n\tif (!reset_ctl)\n\t\treturn -ENOMEM;\n\n\treset_ctl->handle = adev;\n\treset_ctl->async_reset = aldebaran_async_reset;\n\treset_ctl->active_reset = AMD_RESET_METHOD_NONE;\n\treset_ctl->get_reset_handler = aldebaran_get_reset_handler;\n\n\tINIT_WORK(&reset_ctl->reset_work, reset_ctl->async_reset);\n\t/* Only mode2 is handled through reset control now */\n\treset_ctl->reset_handlers = &aldebaran_rst_handlers;\n\n\tadev->reset_cntl = reset_ctl;\n\n\treturn 0;\n}",
    "fixed_function": "int aldebaran_reset_init(struct amdgpu_device *adev)\n{\n\tstruct amdgpu_reset_control *reset_ctl;\n\n\treset_ctl = kzalloc(sizeof(*reset_ctl), GFP_KERNEL);\n\tif (!reset_ctl)\n\t\treturn -ENOMEM;\n\n\tif (!adev) {\n\t\tkfree(reset_ctl);\n\t\treturn -EINVAL;\n\t}\n\n\treset_ctl->handle = adev;\n\treset_ctl->async_reset = aldebaran_async_reset;\n\treset_ctl->active_reset = AMD_RESET_METHOD_NONE;\n\treset_ctl->get_reset_handler = aldebaran_get_reset_handler;\n\n\tif (!reset_ctl->async_reset) {\n\t\tkfree(reset_ctl);\n\t\treturn -EINVAL;\n\t}\n\n\tINIT_WORK(&reset_ctl->reset_work, reset_ctl->async_reset);\n\t/* Only mode2 is handled through reset control now */\n\treset_ctl->reset_handlers = &aldebaran_rst_handlers;\n\n\tif (adev->reset_cntl) {\n\t\tkfree(adev->reset_cntl);\n\t}\n\n\tadev->reset_cntl = reset_ctl;\n\n\treturn 0;\n}"
}